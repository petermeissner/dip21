{
    "collab_server" : "",
    "contents" : "\n#' doing the search\n#' @param x\n#' @param wahlperiode legislative term use e.g. wahlperioden(18) to get the\n#' right value to put into the form\n#' @param vorgangstyp type of proceeding; use e.g. vorgangstypen(\"Gesetzgebung\")\n#' to get the right values to put in.\n#' @param suchwort search term\n#' @param nummer \"Drucksache\" document number related to the proceeding\n#' @param force option passed along to init_search_page(), whether or not force\n#'  re-initialisation of seeerver session\n#' @param res A character vector naming the results to be returned:\n#'  n - number of proceddings found\n#'  table - overview table of results found\n#' @export\ndip21_search <- function(\n  wahlperiode = 18,\n  vorgangstyp = \"Alle\",\n  nummer      = NULL,\n  suchwort    = NULL,\n  force       = FALSE,\n  res         = c(\"nhits\", \"npages\")\n){\n  # init session and send form\n  form_response <-\n    send_form(\n      init_search_page(),\n      base_url =  \"http://dipbt.bundestag.de\",\n      submit=list(method=\"Suchen\"),\n      wahlperiode = paste(wahlperioden(wahlperiode), collapse = \" \"),\n      vorgangstyp = paste(vorgangstypen(vorgangstyp), collapse = \" \"),\n      suchwort    = paste(suchwort,    collapse = \" \"),\n      nummer      = paste(nummer,    collapse = \" \")\n    )\n  form_content <- httr::content(form_response)\n\n  # store in cache for debugging\n  cache$last_request        <-\n    form_response\n  cache$last_request_fields <-\n    form_response$request$options$postfields %>%\n    rawToChar() %>%\n    strsplit(\"&\") %>%\n    unlist()\n\n  # return\n  results <- list()\n  if(\"nhits\"        %in% res){ results$nhits        <- n_search_results(form_content)       }\n  if(\"npages\"       %in% res){ results$npages       <- npages_search_results(form_content)  }\n  if(\"content\"      %in% res){ results$content      <- form_content                         }\n  if(\"trefferliste\" %in% res){ results$trefferliste <- trefferliste(form_content)           }\n  return(results)\n}\n\n\n#' function for getting trefferliste from\n#' @param xml xml from which to extract form for send\ntrefferliste <- function(xml){\n  tmp <-\n    send_form(\n      xml,\n      base_url =  \"http://dipbt.bundestag.de\",\n      submit=list(method=\"Dateiausgabe Trefferliste\"),\n      exportType = \"csv\"\n    ) %>%\n    httr::content()\n\n  tmp <-\n    substring(tmp, gregexpr('\"', tmp)[[1]][1], nchar(tmp)) %>%\n    textConnection() %>%\n    read.table(sep=\";\", header=TRUE)\n\n  return(tmp)\n}\n\n\n#' function for getting options\n#' @export\ndip21_search_options <-\n  function(){\n    # cache return\n    if( !is.null(cache$dip21_search_options) ){\n      return(cache$dip21_search_options)\n    }\n\n    # doing work\n    xml <- init_search_page()\n    stopifnot( any(class(xml) %in% c(\"xml_node\", \"xml_document\")) )\n\n    # get selects\n    tmp <-\n      xml_find_all(xml,\"//select\")\n\n    # get names\n    select_names <-\n      tmp %>%\n      xml_attr(\"name\")\n\n    # get options\n    options <-\n      tmp %>%\n      lapply(\n        function(x){\n          x <- xml_find_all(x, xpath=\"option\")\n          data.frame(\n            value = xml_attr(x, \"value\"),\n            label = xml_text(x)\n          )\n        }\n      )\n\n    # put names and options together\n    for(i in seq_along(options) ) {\n      options[[i]] <- cbind(options[[i]], select=select_names[i])\n    }\n\n    # add names to list items\n    names(options) <- select_names\n\n    # store cache\n    cache$dip21_search_options <- options\n\n    # return\n    return(options)\n  }\n\n#' function returning options for legislative terms\n#' @param wp a regular expression used to look up labels and return their values\n#' @export\nwahlperioden <- function(regex=NULL) {\n  df <- dip21_search_options()[[1]][,1:2]\n  if( is.null(regex) ){\n   warning(\"no value supplied to function, returning options available\")\n   return(df)\n  }\n  df$value[grep(regex, df$label, ignore.case = TRUE)]\n}\n\n#' function returning options for tpe of proceeding\n#' @param vt a regular expression used to look up labels and return their values\n#' @export\nvorgangstypen  <- function(regex=NULL) {\n  df <- dip21_search_options()[[2]][,1:2]\n  if( is.null(regex) ){\n    warning(\"no value supplied to function, returning options available\")\n    return(df)\n  }\n  df$value[grep(regex, df$label, ignore.case = TRUE)]\n}\n\n\n#' function extractiong number of search result hits\n#' @param xml the seach result to extract number from\n#' @export\nn_search_results <- function(xml){\n  xml %>%\n    rvest::html_nodes(xpath=\"//label[contains(text(), 'Treffer')]\") %>%\n    rvest::html_text() %>%\n    stringr::str_extract(\"\\\\d*\\\\)\") %>%\n    stringr::str_replace(\"\\\\)\",\"\")  %>%\n    as.numeric()\n}\n\n\n#' function extractiong number of search result hit pages\n#' @param xml the seach result to extract number from\n#' @export\nnpages_search_results <- function(xml){\n  xml %>%\n    rvest::html_nodes(xpath=\"//label[contains(text(), 'Treffer')]\") %>%\n    rvest::html_text() %>%\n    stringr::str_extract(\"von \\\\d*\") %>%\n    stringr::str_extract(\"\\\\d+\")  %>%\n    as.numeric()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1460898697980.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3011641801",
    "id" : "1EFEBD0A",
    "lastKnownWriteTime" : 1461499345,
    "last_content_update" : 1461499345239,
    "path" : "~/Dropbox/gesetzgebungsapi/gapiworker/R/dip21_search.R",
    "project_path" : "R/dip21_search.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}